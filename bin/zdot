#!/usr/bin/env bash

cd "$(dirname "$0")/.." || exit

export DOTFILES
DOTFILES=$(pwd -P)

export XDG_CONFIG_HOME
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"

SYMLINKS_TXT="$XDG_CONFIG_HOME/zdot/symlinks.txt"

set -e

echo ''

. "$DOTFILES/lib/utils.sh"

change_shell () {
  ask "Change shell? "
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    # Using which zsh to get an updated path
    # e.g. installed via brew
    chsh -s "$(which zsh)" "$(whoami)"
  fi
}

export -f ask
export -f warn
export -f okay
export -f ask_long
export -f link_file
export -f print_color

check_setup () {
  if [[ ! -f "$SYMLINKS_TXT" ]]
  then
    fail "ZDOT doesn't appear to have been set up yet. You should run \`zdot setup\` first."
    echo ""
    exit 1
  fi
  true;
}

setup () {
  info "Installing dotfiles...$DOTFILES"

  mkdir -p "$XDG_CONFIG_HOME/zdot"
  rm "SYMLINKS_TXT" 2> /dev/null || true

  warn "When a symlink already exists but differs from the dotfiles version, what do you want to do?"
  ask "[s]kip it, [o]verwrite it, [b]ack it up? "

  export LINK_FILE_BEHAVIOR=$REPLY

  find -H "$DOTFILES" -maxdepth 3 -not -name ".git" -and \
    -name '*.symlink' -exec bash -c 'link_file "$0" "$HOME/.$(basename "${0%.*}")"' {} \;

  # find the setup files and run them iteratively
  find -H "$DOTFILES" -maxdepth 3 -not -name '.git' -and \
    -name setup.sh | while read -r setter ; do bash -c "chmod u+x ${setter} && ${setter}" ; done

}

setdown() {
  check_setup

  while IFS= read -r link; do

    ### Trim leading whitespaces ###
    link="${link##*( )}"

    ### trim trailing whitespaces  ##
    link="${link%%*( )}"

    if [[ -L $link ]]
    then
      rm "$link"
    fi

  done < <(cat "$SYMLINKS_TXT")

  rm "$SYMLINKS_TXT" 2> /dev/null || true

}

install () {

  check_setup

  # find the install files and run them iteratively
  find -H "$DOTFILES" -maxdepth 3 -not -name '.git' -and \
    -name install.sh | while read -r installer ; do bash -c "chmod u+x ${installer} && ${installer}" ; done

}

update () {

  check_setup

  # find the update files and run them iteratively
  find -H "$DOTFILES" -maxdepth 3 -not -name '.git' -and \
    -name update.sh | while read -r updater ; do bash -c "chmod u+x ${updater} && ${updater}" ; done

}

usage () {
  echo "zdot -- dotfiles management"
  echo ""
  echo "Usage: zdot install|bootstrap [options]"
  echo ""
  echo "    s, setup     Set up the system, create link, etc"
  echo "    d, setdown   Remove symlinks that zdot knows about"
  echo "    i, install   Install software"
  echo "    u, update    Update software"
  echo "   -h, --help    Show this message"
  echo ""
  exit
}

case "$1" in
  "s"|"up"|"setup")
    setup
    change_shell
    exit
    ;;
  "d"|"down"|"setdown")
    setdown
    exit
    ;;
  "i"|"install")
    install
    exit
    ;;
  "u"|"update")
    update
    exit
    ;;
  "-h"|"--help"|"h"|"help")
    usage
    ;;
  *)
    echo "Invalid option: $1"
    usage
  ;;
esac

