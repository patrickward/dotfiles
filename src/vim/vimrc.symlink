"""""""""""""""""""""""""""""""""""
" Vimrc Configuration
"""""""""""""""""""""""""""""""""""
set nocompatible                  " Must come first because it changes other options.
set encoding=utf8
let mapleader = ","

"""""""""""""""""""""""""""""""""""
" Plug Configuration
"""""""""""""""""""""""""""""""""""
call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Make sure you use single quotes

" Utility
Plug 'editorconfig/editorconfig-vim'
Plug 'vim-scripts/bufexplorer.zip'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-commentary'
Plug 'mileszs/ack.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'christoomey/vim-tmux-runner'

" Fuzzy file finding
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Theme / Colors
Plug 'ap/vim-css-color'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Only enable if changing the tmuxline theme
" Plug 'edkolev/tmuxline.vim'

" Git
" Plug 'tpope/vim-fugitive'

" General programming tools (applicable to multiple languages)
"
" Linting and fixing with LSP
Plug 'w0rp/ale'
" Plug 'valloric/youcompleteme'

" Markdown/Writing
Plug 'lervag/vimtex'
Plug 'tpope/vim-markdown'

" Ruby / Rails
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'

" PHP / Laravel
" Plug 'xsbeats/vim-blade'

" Python
Plug 'glench/vim-jinja2-syntax'

" Elixir
Plug 'elixir-editors/vim-elixir'

" Rust
Plug 'rust-lang/rust.vim'

" Javascript
Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'mustache/vim-mustache-handlebars'

" Devops
Plug 'chase/vim-ansible-yaml'

" GPG
Plug 'jamessan/vim-gnupg'

" Snippets
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'

" Accounting
" Plug 'ledger/vim-ledger'

" End plug
call plug#end()

"""""""""""""""""""""""""""""""""""
" Configuration
"""""""""""""""""""""""""""""""""""

" Turn on file type detection.
filetype plugin indent on

" Turn on syntax highlighting.
syntax on

" runtime macros/matchit.vim        " Load the matchit plugin.
set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

" Intuitive backspacing. Allow backspacing over everything in insert mode.
set backspace=indent,eol,start

" Enhanced command line completion.
set wildmenu

" Complete files like a shell.
set wildmode=list:longest

" fix default regex handling by using very magic by default
nnoremap / /\v
vnoremap / /\v

" Case-insensitive searching.
set ignorecase

" But case-sensitive if expression contains a capital letter.
set smartcase

" apply substitutions globally by default
set gdefault

" Highlight matches as you type.
set incsearch

" Highlight matches.
set hlsearch

nnoremap <leader><space> :noh<cr> " clear out highlighted searches (\space)

" Show line numbers.
set number

" Show cursor position.
set ruler

" Turn on line wrapping.
set wrap

" Wrap lines at the 'breakat' char rather than last char to fit on screen
set linebreak

" Show 3 lines of context around the cursor.
set scrolloff=3

" Set the terminal's title
set title

" No beeping.
set visualbell

" Don't make a backup before overwriting a file.
set nobackup

" And again.
set nowritebackup

" Keep swap files in one location
set directory=$HOME/.vim/tmp//,.

" always set autoindenting on
set autoindent

" copy the previous indentation on autoindenting
set copyindent

" default indentation: 2 spaces
set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

" set tabs and spaces based on filetype
if has("autocmd")

  " syntax for these languages is fussy over tabs Vs spaces
  autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType snippet setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd FileType taskpaper setlocal ts=2 sts=2 sw=2 noexpandtab

  " base style for certain languages
  autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType ruby setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab
  autocmd FileType php setlocal ts=4 sts=4 sw=4 expandtab
  autocmd FileType c setlocal ts=4 sts=4 sw=4 expandtab
  autocmd FileType c++ setlocal ts=4 sts=4 sw=4 expandtab
  autocmd FileType zsh setlocal ts=2 sts=2 sw=2 expandtab

  " Syntax for odd file extensions
  autocmd BufNewFile,BufRead *.chatito set syntax=markdown
  autocmd BufNewFile,BufRead *.chatito setlocal ts=4 sts=4 sw=4 expandtab

endif

" Strip trailing whitespace on save
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Use ripgrep for grep searches
if executable("rg")
    set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
    set grepformat=%f:%l:%c:%m,%f:%l:%m
    let g:ctrlp_user_command = 'rg --files %s'
    let g:ctrlp_use_caching = 0
    let g:ctrlp_working_path_mode = 'ra'
    let g:ctrlp_switch_buffer = 'et'
endif

"""""""""""""""""""""""""""""""""""
" Interface
"""""""""""""""""""""""""""""""""""

" Show the status line all the time
set laststatus=2

" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

" Fonts
set guifont=Meslo\ LG\ M\ for\ Powerline:h14
set linespace=2

" Set vim to 256 colors
set t_Co=256
set background=dark

" Enable +y for yanking to the system clipboard
set clipboard=unnamed

"""""""""""""""""""""""""""""""""""
" Airline Options
"""""""""""""""""""""""""""""""""""
" Used patched fonts for airline arrows/triangles
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#show_buffers=0
let g:airline#extensions#tabline#show_close_button=0
" let g:airline_theme='bubblegum'
" Enable ALE to display error information in the status bar;
let g:airline#extensions#ale#enabled=1

"""""""""""""""""""""""""""""""""""
" ALE Linters
"""""""""""""""""""""""""""""""""""
let g:ale_linters = {'python': ['flake8', 'mypy', 'pylint', 'pycodestyle'], 'elixir': ['elixir-ls'], 'ruby': ['solargraph', 'standardrb'], 'javascript': ['standard'], 'typescript': ['standard'], 'typescriptreact': ['standard']}
let g:ale_elixir_elixir_ls_release='/Users/patrick/code/utils/elixir-ls/release'

" ALE Fixers
"""""""""""""""""""""""""""""""""""
let g:ale_fixers = {'elixir': ['mix_format'], 'ruby': ['standardrb'], 'javascript': ['standard'], 'typescript': ['standard'], 'typescriptreact': ['standard']}

" ALE Config
"""""""""""""""""""""""""""""""""""
let g:ale_completion_enabled = 1
let g:ale_sign_error = 'E'
let g:ale_sign_warning = 'W'
let g:ale_lint_on_enter = 0
let g:ale_lint_on_text_changed = 'never'

highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow
" let g:ale_linters_explicit = 1
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1

noremap <Leader>ad :ALEGoToDefinition<CR>
nnoremap <leader>af :ALEFix<cr>
noremap <Leader>ar :ALEFindReferences<CR>
noremap <Leader>ah :ALEHover<CR>

"Move between linting errors
nnoremap ]r :ALENextWrap<CR>
nnoremap [r :ALEPreviousWrap<CR>


"""""""""""""""""""""""""""""""""""
" YCM Config
"""""""""""""""""""""""""""""""""""
let g:ycm_keep_logfiles=1

"""""""""""""""""""""""""""""""""""
" Mappings
"""""""""""""""""""""""""""""""""""

" Tab mappings.
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

" Toggle 'set list' to show invisible characters
" and set the symbols to the sames ones as TextMate
nmap <leader>l :set list!<cr>
set listchars=tab:▸\ ,eol:¬

" retain visual selection after shifting right/left
" see: http://vim.wikia.com/wiki/Shifting_blocks_visually
vnoremap > >gv
vnoremap < <gv

" Controversial...swap colon and semicolon for easier commands
nnoremap ; :
"nnoremap : ;

vnoremap ; :
"vnoremap : ;

" Automatic fold settings for specific files. Uncomment to use.
" autocmd FileType ruby setlocal foldmethod=syntax
" autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2

" fold tag - sets folding for html tags
nnoremap <leader>ft Vatzf

" Map ,e and ,v to open files in the same directory as the current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Open the current document with Marked.app
nnoremap <leader>md :!open -a Marked\ 2.app '%:p'<cr>

" Show word count of selection
nmap <leader>wc :!wc %<cr>

" PHPUnit Tests
" Run all tests
nmap <leader>ta :!clear && phpunit<cr>
" Run test on current test method
nmap <leader>tm yiw:!clear && phpunit --filter ^R"<cr>

" GCC Compile the file in the current buffer
" set makeprg=gcc\ -o\ %<\ %
" Make and run the current file in the buffer
nnoremap <silent> <f7> :make %< && ./%<<cr>

" !stty sanity -
nnoremap <leader>sane :!stty sane<cr> " Return the screen to sane state

" Edit the .vimrc in a split pane
nmap <leader>vr :sp $MYVIMRC<cr>
" Source (reload) the .vimrc
nmap <leader>so :source $MYVIMRC<cr>

"""""""""""""""""""""""""""""""""""
" FZF
"""""""""""""""""""""""""""""""""""
" Use ripgrep to search for files
let $FZF_DEFAULT_COMMAND = 'rg -l ""'

" Search files
map <C-p> :Files<CR>
" Search buffers
map <C-b> :Buffers<CR>
" Search commands
" map <Leader><Leader> :Commands<CR>
map <Leader>/ :execute 'Rg ' . input('Rg/')<CR>
" Lines in the current buffer
map <Leader>l :BLines<CR>
" Git files status
map <Leader>gf :GF?<CR>


"""""""""""""""""""""""""""""""""""
" Tmux Vim Runner
"""""""""""""""""""""""""""""""""""
let g:VtrOrientation = "h"
let g:VtrPercentage  = 35
nnoremap <leader>sc :VtrSendCommandToRunner!<cr>
nnoremap <leader>fc :VtrFlushCommand<cr>


"""""""""""""""""""""""""""""""""""
" Ledger Configuration
"""""""""""""""""""""""""""""""""""

let g:ledger_default_commodity = 'USD'
let g:ledger_commodity_before = 0
let g:ledger_commodity_sep = ' '

" Move by transactions in ledger files
au FileType ledger noremap { ?^\d<CR>
au FileType ledger noremap } /^\d<CR>

" Autocomplete and align when on a number
" e.g. assets:check>Tab><Space>123.45<Tab>
au FileType ledger inoremap <silent> <Tab> <C-r>=ledger#autocomplete_and_align()<CR>
au FileType ledger vnoremap <silent> <Tab> :LedgerAlign<CR>

" Double-click to reset cleared state
au FileType ledger noremap <silent><buffer> <leader><Tab> :call ledger#transaction_state_toggle(line('.'), ' *?!')<CR>


"""""""""""""""""""""""""""""""""""
" Ultisnips
"""""""""""""""""""""""""""""""""""
let g:UltiSnipsListSnippets="<c-l>"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"


" Access colors present in 256 colorspace
" let base16colorspace=256
" colorscheme base16-bright
" colorscheme solarized

"""""""""""""""""""""""""""""""""""
" Dracula theme
"""""""""""""""""""""""""""""""""""
packadd! dracula_pro
let g:dracula_colorterm =0
colorscheme dracula_pro

" Turn colorcolumn on/off
function! ColorColumnOnOff(width)
  if exists('+colorcolumn')
    execute "set colorcolumn=" . a:width
    highlight ColorColumn ctermbg=green
  endif
endfunction

command! ColorColumnOn call ColorColumnOnOff(70)
command! ColorColumnOff call ColorColumnOnOff(0)
command! -nargs=1 ColorColumnTo call ColorColumnOnOff(<q-args>)


