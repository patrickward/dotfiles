#!/usr/bin/env zsh

# Notes Management System
# Usage: notes <command> [options]

notes() {
  # Environment Variables
  : ${NOTES_DIR:="$HOME/notes"}
  : ${EDITOR:="vim"}

  colors=(
    RED    '\033[0;31m'
    GREEN  '\033[0;32m'
    ORANGE '\033[0;33m'
    PURPLE '\033[0;35m'
    NO_COLOR '\033[0m'
  )

  # Helper functions
  notes_error() {
    echo "${colors[RED]}$1${colors[NO_COLOR]}"
    [[ $# -eq 1 ]] && notes_usage
  }

  notes_usage() {
    cat << EOF

Notes - Manages notes in the configured notes directory

Usage: notes <command> [options]

Commands:
  cd              - Change to the notes directory
  ls|list [query] - List notes, optionally filtered by query
  rm <file>       - Remove a note
  f|s|find|search <query> - Search note contents
  n|new [title] [subject] [tags] - Create a new note
  v|view|show <file> - View a note
  e|edit <file>   - Edit a note
  ia <file>       - Open a note in IA Writer
  m|marked <file> - Open a note in Marked 2
  push <message>  - Commit and push changes
  pull            - Pull changes from remote
  sync <message>  - Sync changes (commit, push, and pull)
  tags            - Show all unique tags
  subjects        - Show all unique subjects
  contents        - Generate a table of contents

EOF
  }

  # Core functionality functions
  _find() {
    grep -r "$NOTES_DIR" -li -e "$*" 2>/dev/null | sed -E "s|^$NOTES_DIR/||" | sed -E 's|^/+||'
  }

  # Create a new file
  _new() {
    local title="$1" subject="$2" tags="$3"

    [[ -z "$title" ]] && read -r "title?Enter a title: "
    [[ -z "$subject" ]] && read -r "subject?Enter a subject (e.g. +project): "
    [[ -z "$tags" ]] && read -r "tags?Enter associated tags (e.g. @tag1 @tag2): "

    [[ -z "$title" ]] && { notes_error "Can't create a new file without a title."; return 1; }

    local filename="${${title:l}//[^a-zA-Z0-9@]/-}.md"
    [[ $filename =~ .*meeting.* ]] && filename="meetings/$filename"

    if [[ -f "$filename" ]]; then
      echo "${colors[ORANGE]}File '$filename' already exists.${colors[NO_COLOR]}"
      echo "Choose an option:"
      echo "1) Overwrite existing file"
      echo "2) Create a new file with a random suffix"
      echo "3) Cancel operation"
      read -r "choice?Enter your choice (1-3): "
      case $choice in
        1)
          echo "Overwriting existing file."
          ;;
        2)
          local random_suffix=$(openssl rand -hex 4)
          filename="${filename%.md}-${random_suffix}.md"
          echo "Creating new file: $filename"
          ;;
        3)
          echo "Operation cancelled."
          return 0
          ;;
        *)
          echo "Invalid choice. Operation cancelled."
          return 1
          ;;
      esac
    fi

    local template="$NOTES_DIR/../templates/default.md"
    [[ ! -f "$template" ]] && { notes_error "Template file not found: $template"; return 1; }

    cp "$template" "$filename"
    sed -i.bak -e "s/{title}/$title/g" \
               -e "s/{date}/$(date '+%Y-%m-%d %H:%M:%S')/g" \
               -e "s/{subject}/$subject/g" \
               -e "s/{tags}/$tags/g" "$filename" && rm "$filename.bak"

    echo "${colors[GREEN]}Created new note: $filename${colors[NO_COLOR]}"
    $EDITOR "$filename"
  }

  # Function to extract tags or subjects
  _extract_metadata() {
    local type="$1"
    local pattern="$2"
    grep -h "$pattern" "$NOTES_DIR"/*.md | tr ' ' '\n' | grep "^$pattern" | sort | uniq -c |
      awk -v oc=${colors[ORANGE]} -v pc=${colors[PURPLE]} -v nc=${colors[NO_COLOR]} '{printf "%s%4d %s%s%s\n", oc, $1, pc, $2, nc}'
  }

  # Function to view a file in bat or the default $PAGER
  _view_file() {
    local file="$1"
    if command -v bat > /dev/null 2>&1; then
      bat --style=plain --theme="ansi" "$file"
    else
      ${PAGER:-less} "$file"
    fi
  }

  [[ ! -d "$NOTES_DIR" ]] && mkdir -p "$NOTES_DIR"

  case "$1" in
    cd) cd "$NOTES_DIR" ;;
    ls|list) ls -1 "$NOTES_DIR"${2:+/*$2*} ;;
    rm)
      local file="$NOTES_DIR/$2"
      [[ ! -f "$file" ]] && { notes_error "File not found: $2"; return 1; }
      read -q "?Are you sure you want to remove $2? (y/n) " && rm "$file"
      ;;
    f|s|find|search) _find "${@:2}" ;;
    n|new) (cd "$NOTES_DIR" && _new "$2" "$3" "$4") ;;
    v|view|show)
      local file="$NOTES_DIR/$2"
      [[ ! -f "$file" ]] && { notes_error "File not found: $2"; return 1; }
      _view_file "$file"
      ;;
    e|edit)
      local file="$NOTES_DIR/$2"
      [[ ! -f "$file" ]] && { notes_error "File not found: $2"; return 1; }
      $EDITOR "$file"
      ;;
    ia)
			local file="$NOTES_DIR/$2"
      [[ ! -f "$file" ]] && { notes_error "File not found: $2"; return 1; }
      open -a "iA Writer" "$file"
		  ;;
    m|marked)
      local file="$NOTES_DIR/$2"
      [[ ! -f "$file" ]] && { notes_error "File not found: $2"; return 1; }
      open "x-marked://open?file=$file&raise=true"
      ;;
    push|pull|sync)
      (
        cd "$NOTES_DIR/.." || return 1
        case "$1" in
          push)
            [[ -z "$2" ]] && { notes_error "Please add a commit message."; return 1; }
            git add -A && git commit -m "$2" && git push
            ;;
          pull) git pull ;;
          sync)
            [[ -z "$2" ]] && { notes_error "Please add a commit message."; return 1; }
            git add -A && git commit -m "$2" && git pull && git push
            ;;
        esac
      )
      ;;
    tags) _extract_metadata "tags" "@" ;;
    subjects) _extract_metadata "subjects" "+" ;;
    contents)
      {
        echo "# Notes\n\n---\n"
        find "$NOTES_DIR" -name "*.md" | sort | while read -r file; do
          title=$(sed -n 's/^# //p' "$file" | head -n1)
          echo "* [${title:-$(basename "$file")}]($file)"
        done
      } > "$NOTES_DIR/index.md"
      ${PAGER:-less} "$NOTES_DIR/index.md"
      ;;
    help|-h|--help) notes_usage ;;
    *)
      [[ -z "$1" ]] && { notes_usage; return 1; }
      local file="$NOTES_DIR/$1"
      [[ ! -f "$file" ]] && { notes_error "File not found: $1"; return 1; }
      _view_file "$file"
      ;;
  esac
}

