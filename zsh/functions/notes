#!/bin/bash
#
# Simple script to automatically create or
# open plaintext notes in a particular
# directory.
# Usage: notes c - to cd to the notes directory
#        notes l - to list all notes in the direct
#        notes <filename>[.md] to create or open a file in vim.
#
# If no extension is provided, .md will be automatically added

# ENVIRONMENT VARS
#
# Override $NOTES_DIR in $HOME/.localrc
#

notes () {

  RED='\033[0;31m'
  GREEN='\033[0;32m'
  NO_COLOR='\033[0m'
  SCRIPT_PATH="$DOTDIR/zsh/functions"

  # Override NOTES_DIR in .localrc for a different path
  [ -z "$NOTES_DIR" ] && export NOTES_DIR="$HOME/notes"

  # remove trailing slashes
  LNOTES_DIR=${NOTES_DIR%/}

  LESCAPED_DIR="$(printf "%s" "$LNOTES_DIR" | sed -e 's/[]\/$*.^|[]/\\&/g')"

  _error() {
    echo "${RED}$1${NO_COLOR}"
    if [ $# -eq 1 ]; then
      _usage
    fi
    return 0
  }

  _usage() {
    printf "\n"
    echo "Notes - Opens notes in the configured notes directory"
    printf "\n"
    echo "Command:"
    printf "\n"
    echo "notes cd - Change to the notes directory"
    echo "notes ls [search] - List all notes in the notes directory. Add an optional search pattern."
    echo "notes find <search> - Find notes with <search> in the contents."
    echo "notes push <message> - Commits and pushes any changes to the git repo. Message is required for the commit."
    echo "notes pull - Pulls any upstream changes into the local repo."
    echo "notes sync <message> - Commit, push, and pull all changes."
    echo "notes new [[title] [project] [tags]] - Create a new note."
    echo "notes view <filename> - View a new note."
    echo "notes edit <filename> - Edit a new note."
    echo "notes open <filename> - An alias for the edit command."
    printf "\n"
    echo "Use tab-completion for files"
    printf "\n"
  }

  # From: https://github.com/pimterry/notes
  _without_notes_dir() {
    cat | sed -e "s/^$LESCAPED_DIR//g" | sed -E "s/^\/+//g"
  }

  # Idea from: https://github.com/pimterry/notes
  _find() {
    local output
    local result
    local formatted
    output=$(grep -r "$LNOTES_DIR" -li -e "$*" 2>&1)
    result=$?
    formatted=$(printf "%s" "$output" | _without_notes_dir)

    if [[ $result == 0 && "$formatted" ]]; then
      printf "%s" "$formatted\n"
      return 0
    else
      return 2
    fi
  }

  _new() {
    title=$1; project=$2; tags=$3

    # Zsh read is `different`, can't use `read -p "Question?" var`
    [[ -z "$title" ]] && read -r "title?Enter a title: "
    [[ -z "$project" ]] && read -r "project?Enter a project (e.g. +Project): "
    [[ -z "$tags" ]] && read -r "tags?Enter associated tags (e.g. @tag): "

    if [ -z "$title" ]; then
      _error "Can't create a new file without a title."
      return 0
    fi

    # Create the file name in lower case
    # with all non-ASCII word chars replaced with a dash
    filename=$(echo "$title" | tr '[:upper:]' '[:lower:]')
    filename=$(echo "${filename//[^a-zA-Z0-9]/-}" | tr -s '-')
    filename+=".md"

    if [ -f $filename ]; then
      $EDITOR $filename
      return 0
    fi

    if [[ "$OSTYPE" == darwin* ]]; then
      cp -X "$SCRIPT_PATH/templates/default.md" $filename
    else
      cp "$SCRIPT_PATH/templates/default.md" $filename
    fi

    # Copy the template and make substitutions
    CREATED=$(date '+%Y-%m-%d %H:%M:%S')
    sed -i.bak -e "s/{title}/$title/g" -e "s/{date}/$CREATED/g" "$filename"
    [[ -n "$project" ]] && sed -i.bak "s/{project}/$project/g" "$filename"
    [[ -n "$tags" ]] && sed -i.bak "s/{tags}/$tags/g" "$filename"
    [[ -f "$filename.bak" ]] && rm "$filename.bak"

    $EDITOR "$filename"
  }

  # Look for overridden env vars or use the defaults
  [[ -z "$LNOTES_DIR" ]] && LNOTES_DIR="$HOME/notes"
  [[ -z "$LNOTES_DIR" ]] && LNOTES_DIR="$HOME/notes"

  # Ensure the env var has been exported
  if ! env | grep -q '^LNOTES_DIR='
  then
    export VARIABLE
  fi

  case "$1" in
    cd)
      cd "$LNOTES_DIR" || exit 1
      ;;
    ls)
      echo "${GREEN}Notes found:${NO_COLOR}"
      if [ $# -eq 2 ]; then
        # ls -l -1 "$LNOTES_DIR" | grep -i "$2"
        # ls -l -1 "$LNOTES_DIR"/*"$2"*
        find "$LNOTES_DIR" -name "*$2*" -exec basename {} \;
      else
        ls -l -1 "$LNOTES_DIR"
      fi
      ;;
    find)
      pattern="${*:2}"
      if [ -z "$pattern" ]; then
        _error "Find needs a pattern to search by."
        return 1
      fi
      _find "${@:2}"
      ;;
    new)
      pushd "$LNOTES_DIR" || exit 1
      _new "$2" "$3" "$4"
      popd || exit 1
      ;;
    view)
      filepath="$LNOTES_DIR/$2"
      if [ -z "$2" ] || [ ! -f "$filepath" ]; then
        _error "File not found."
        return 1
      fi
      open -a "Marked 2" "$filepath"
      ;;
    push)
      if [ ! $# -eq 2 ]; then
        _error "Please add a commit message."
      else
        pushd "$NOTES_DIR" || exit 1
        git add -A
        git commit -m "$1"
        git push
        popd || exit 1
      fi
      ;;
    pull)
      pushd "$NOTES_DIR" || exit 1
      # Look for changes in the git repo
      # if ! git diff-index --quiet HEAD --; then
      if [[ $(git status --porcelain) ]]; then
        _error "There are uncommited changes you should review before pulling." 0
        git status
      else
        git pull
        popd || exit 1
      fi
      ;;
    sync)
      pushd "$NOTES_DIR" || exit 1
      # Look for changes in the git repo
      if [[ $(git status --porcelain) ]]; then
        read -r "message?Enter a commit message: "
        git add -A
        git commit -m "$1"
      fi
      git pull
      git push
      popd || exit 1
      ;;
    help|-h|--help)
      _usage
      ;;
    edit|open)
      if [[ -z "$2" ]]; then
        _usage
        return 1
      fi
      pushd "$LNOTES_DIR" || exit 1
      if [[ ! -f "$2" ]]; then
        _error "File not found."
        popd || exit 1
        return 1
      fi
      $EDITOR "$2"
      popd || exit 1
      ;;
    *)
      _usage
      return 0
  esac
}

